import streamlit as stimport pandas as pd# --- Load Weights and Thresholds from Excel ---excel_file = "LNE CustomerHealthScoringModel.xlsx"# Load the Input sheetdf = pd.read_excel(excel_file, sheet_name="Input")# Extract the relevant KPI settings# Assuming your Input sheet has columns like: Metric, Low, Medium, High, Weightkpi_settings = df[['Metric', 'Low Risk', 'Moderate Risk', 'High Risk', 'Weight']]# --- Streamlit App ---st.title("Customer Lifecycle Management Health Score")st.markdown("Enter your actual KPI metrics below to calculate the weighted health score.")user_inputs = {}section_scores = {}# Input formwith st.form("kpi_form"):    for _, row in kpi_settings.iterrows():        metric = row['Metric']        value = st.number_input(f"{metric}", min_value=0.0, step=0.1)        user_inputs[metric] = value    submitted = st.form_submit_button("Calculate Score")if submitted:    total_score = 0    total_weight = 0    results = []    for _, row in kpi_settings.iterrows():        metric = row['Metric']        low = row['Low Risk']        med = row['Moderate Risk']        high = row['High Risk']        weight = row['Weight']        value = user_inputs[metric]        # Assign points based on thresholds        if value >= low:            score = 3            level = "Low Risk"        elif value >= med:            score = 2            level = "Moderate Risk"        else:            score = 1            level = "High Risk"        weighted_score = score * weight        total_score += weighted_score        total_weight += weight        results.append({            "Metric": metric,            "Value": value,            "Risk Level": level,            "Score": score,            "Weight": weight,            "Weighted Score": weighted_score        })    # Final health score    final_score = total_score / total_weight if total_weight > 0 else 0    st.subheader("Results")    st.write(pd.DataFrame(results))    st.metric("Final Customer Health Score", f"{final_score:.2f}")    if final_score >= 2.5:        st.success("Status: GREEN (Healthy)")    elif final_score >= 1.75:        st.warning("Status: YELLOW (At Risk)")    else:        st.error("Status: RED (High Risk)")